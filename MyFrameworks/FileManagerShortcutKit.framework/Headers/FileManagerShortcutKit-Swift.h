// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC22FileManagerShortcutKit20FileManagerShortcuts")
@interface FileManagerShortcuts : NSObject
/// 创建文件夹
/// \param sandBoxURL 沙盒路径，如 Document, Library/Caches, tmp
///
/// \param path 在沙盒路径中的相对路径
///
/// \param createIfNeeded 是否创建路径中不存在的文件夹，true 则创建，否则，不创建
///
/// \param attributes 文件夹的属性，默认为默认属性，即 nil
///
+ (BOOL)createDirectoryAt:(NSURL * _Nonnull)sandBoxURL relativePath:(NSString * _Nonnull)path shouldCreateFolderIfNeeded:(BOOL)createFolderIfNeeded attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error;
/// 移动文件
/// \param fromsandboxDirectory 源文件沙盒路径，如 Document, Library/Caches, tmp
///
/// \param fromRelativePath 源文件在沙盒路径中的相对路径
///
/// \param toSandBoxDirectory 目标文件位置的沙盒路径，如 Document, Library/Caches, tmp
///
/// \param toRelativePath 目标文件在沙盒路径中的相对路径
///
+ (BOOL)moveItemFromFromsandboxDirectory:(NSURL * _Nonnull)fromsandboxDirectory fromRelativePath:(NSString * _Nonnull)fromRelativePath toSandBoxDirectory:(NSURL * _Nonnull)toSandBoxDirectory toRelativePath:(NSString * _Nonnull)toRelativePath error:(NSError * _Nullable * _Nullable)error;
/// 重命名文件
/// \param sandboxURL 源文件沙盒路径，如 Document, Library/Caches, tmp
///
/// \param relativePath 源文件在沙盒路径中的相对路径
///
/// \param oldName 源文件重命名前的名称
///
/// \param newName 源文件重命名后的名称
///
+ (BOOL)renameItemAtSandboxURL:(NSURL * _Nonnull)sandboxURL relativePath:(NSString * _Nonnull)relativePath fromOldName:(NSString * _Nonnull)oldName toNewName:(NSString * _Nonnull)newName error:(NSError * _Nullable * _Nullable)error;
/// 删除文件
/// \param sandboxURL 文件所在的沙盒路径，如 Document, Library/Caches, tmp
///
/// \param relativePath 文件所在沙盒路径中的相对位置
///
+ (BOOL)removeItemAtSandboxURL:(NSURL * _Nonnull)sandboxURL relativePath:(NSString * _Nonnull)relativePath error:(NSError * _Nullable * _Nullable)error;
/// 判断文件或文件夹是否存在
/// \param sandboxURL 文件的沙盒路径，如 Document, Library/Caches, tmp
///
/// \param relativePath 文件在沙盒路径中的相对路径
///
///
/// returns:
/// true 若文件存在，否则 false
+ (BOOL)itemExistsAtSandboxURL:(NSString * _Nonnull)sandboxURL relativePath:(NSString * _Nonnull)relativePath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface FileManagerShortcuts (SWIFT_EXTENSION(FileManagerShortcutKit))
/// 创建文件夹
/// \param sandBoxURL 沙盒路径，如 Document, Library/Caches, tmp
///
/// \param path 在沙盒路径中的相对路径
///
/// \param createFolderIfNeeded 是否创建路径中不存在的文件夹，true 则创建，否则，不创建
///
/// \param attributes 文件夹的属性，默认为默认属性，即 nil
///
/// \param completion 文件夹完成后回调
///
///
/// throws:
/// <#throws value description#>
+ (BOOL)createDirectoryAt:(NSURL * _Nonnull)sandBoxURL relativePath:(NSString * _Nonnull)path shouldCreateFolderIfNeeded:(BOOL)createFolderIfNeeded attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
/// 移动文件
/// \param fromsandboxDirectory 源文件沙盒路径，如 Document, Library/Caches, tmp
///
/// \param fromRelativePath 源文件在沙盒路径中的相对路径
///
/// \param toSandBoxDirectory 目标文件位置的沙盒路径，如 Document, Library/Caches, tmp
///
/// \param toRelativePath 目标文件在沙盒路径中的相对路径
///
/// \param completion 文件移动完成后的回调
///
+ (BOOL)moveItemFromFromsandboxDirectory:(NSURL * _Nonnull)fromsandboxDirectory fromRelativePath:(NSString * _Nonnull)fromRelativePath toSandBoxDirectory:(NSURL * _Nonnull)toSandBoxDirectory toRelativePath:(NSString * _Nonnull)toRelativePath error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
/// 重命名文件
/// \param sandboxURL 源文件沙盒路径，如 Document, Library/Caches, tmp
///
/// \param relativePath 源文件在沙盒路径中的相对路径
///
/// \param oldName 源文件重命名前的名称
///
/// \param newName 源文件重命名后的名称
///
/// \param completion 文件重命名完成后的回调
///
+ (BOOL)renameItemAtSandboxURL:(NSURL * _Nonnull)sandboxURL relativePath:(NSString * _Nonnull)relativePath fromOldName:(NSString * _Nonnull)oldName toNewName:(NSString * _Nonnull)newName error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
/// 删除文件
/// \param sandboxURL 文件所在的沙盒路径，如 Document, Library/Caches, tmp
///
/// \param relativePath 文件所在沙盒路径中的相对位置
///
/// \param completion 文件删除完成后的回调
///
+ (BOOL)removeItemAtSandboxURL:(NSURL * _Nonnull)sandboxURL relativePath:(NSString * _Nonnull)relativePath error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
@end

#pragma clang diagnostic pop
